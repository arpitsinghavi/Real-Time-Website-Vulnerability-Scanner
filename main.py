
import os
import sys
import time
import requests
import requests
from bs4 import BeautifulSoup
from huepy import *
from core import requester
from core import extractor
from core import crawler
from urllib.parse import unquote
import XSS
from helper import *
start_time = time.time()


def clear():
    if 'linux' in sys.platform:
        os.system('clear')
    elif 'darwin' in sys.platform:
        os.system('clear')
    else:
        os.system('cls')


def banner():
    print('''                                                   
    o    o               8       o    o        8   o  
    8    8               8       8    8        8   8  
    o8oooo8 .oPYo. .oPYo. 8  .o  o8oooo8 .oPYo. 8  o8P 
    8    8 .oooo8 8    ' 8oP'    8    8 .oooo8 8   8  
    8    8 8    8 8    . 8 `b.   8    8 8    8 8   8  
    8    8 `YooP8 `YooP' 8  `o.  8    8 `YooP8 8   8  
    :..:::..:.....::.....:..::...:..:::..:.....:..::..:
    :::::::::::::::::::::::::::::::::::::::::::::::::::
    ::::::::: A Web Vulnerability Scanner :::::::::::::''')


def concatenate_list_data(list, result):
    for element in list:
        result = result + "\n" + str(element)
    return result


file = open('payloads.txt', 'r')
sql_payloads = file.read().splitlines()


def sql_injection_test(url):
    vulnerable_urls = []

    for payload in sql_payloads:
        final_url = url+payload

        try:
            req = requests.get("{}".format(final_url))
            res = req.text
            if 'SQL' in res or 'sql' in res or 'Sql' in res:
                # print("["+green("sql-injection")+"] "+final_url)
                vulnerable_urls.append(final_url)
                break
        except:
            pass

    return vulnerable_urls


def CSRF(target_url):
    csrf_token_found = False
    # Send a GET request to the target URL to retrieve the page content
    response = requests.get(target_url)

    # Check if the response status code indicates success (e.g., 200 OK)
    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')

        # Find all HTML forms on the page
        forms = soup.find_all('form')

        if not forms:
            print("["+yellow("WARNING")+"] No HTML forms found on the page.")

        else:
            for form in forms:
                # Check if the form contains any input fields
                input_fields = form.find_all('input')

                # Check if the form contains a CSRF token input field or a known anti-CSRF header
                csrf_token_found = False
                anti_csrf_headers = ['X-CSRF-Token',
                                     'X-XSRF-TOKEN', 'X-Requested-With']

                for input_field in input_fields:
                    if 'csrf' in input_field.get('name', '').lower() or 'csrf' in input_field.get('id', '').lower():
                        csrf_token_found = True

                for header in anti_csrf_headers:
                    if header.lower() in response.headers:
                        csrf_token_found = True

                if csrf_token_found:

                    print("["+red("CRITICAL")+"] CSRF vulnerability found")

                    print(form)

    else:
        print("["+yellow("WARNING")+"]" +
              f"Failed to retrieve the page. Status code: {response.status_code}")

    if csrf_token_found == False:
        headers = {"Content-Type": "application/x-www-form-urlencoded"}
        data = {"input": "test"}

        # sending a request to the URL and retrieve the response
        response = requests.post(target_url, headers=headers, data=data)

        # checking the response for the presence of certain strings or patterns that may indicate a vulnerability
        if "error" in response.text:
            print("["+red("CRITICAL")+"] CSRF vulnerability found")
        else:
            print("["+green("INFO")+"] No CSRF vulnerability found")

    return csrf_token_found


def remote_code_execution(url):
    payload = "system('ls');"
    # sending request to the URL with the payload and retrieve the response
    response = requests.get(url, params={"input": payload})

    # check the response for the presence of certain strings or patterns that may indicate a vulnerability
    if "total" in response.text:
        print("["+red("CRITICAL")+"] REMOTE CODE EXECUTION found")
        return True
    else:
        print("["+green("INFO")+"] No REMOTE CODE EXECUTION found")
        return False


def security_misconfiguration(url):
    # send a request to the URL and retrieve the response
    response = requests.get(url)

    # check the response for the presence of certain strings or patterns that may indicate a vulnerability
    if "Server" in response.headers:
        print("["+red("CRITICAL") +
              "] Security Misconfiguration: Server Software Version found in Response.")
        return True

    elif "X-Powered-By" in response.headers:
        print("["+red("CRITICAL") +
              "] Security Misconfiguration: Server Framework found in Response.")
        return True

    elif "Set-Cookie" in response.headers:
        print("["+red("CRITICAL") +
              "] Security Misconfiguration: Insecure Cookies found in Response.")
        return True
    else:
        print("["+green("INFO")+"] No Security Misconfiguration Vulnerability Detected.")
        return False


def broken_auth(url):
    # set the login credentials
    username = "test"
    password = "password"

    # send a request to the login page with the credentials and retrieve the response
    response = requests.post(
        url, data={"username": username, "password": password})

    # check the response for the presence of certain strings or patterns that may indicate a vulnerability
    if "incorrect" in response.text:
        print("["+red("CRITICAL") +
              "] Broken Authentication Detected: Incorrect Login Credentials.")
        return True

    elif "session" in response.cookies:
        print("["+red("CRITICAL") +
              "] Broken Authentication Detected: Session Cookie Found in Response.")
        return True

    else:
        print("["+green("INFO")+"] No Broken Authenitcation Vulnerability Detected.")
        return False


def main():

    clear()
    banner()

    main_url = input("\n\n[*] Enter Target URL : ")
    print("\n")

    print("\n"+"["+blue("INF")+"] Scanning Website for all URLs")

    while 1:
        subDomain = False

        if subDomain == True:
            main_url = f"http://web.archive.org/cdx/search/cdx?url=*.{main_url}/*&output=txt&fl=original&collapse=urlkey&page=/"
        else:
            main_url = f"http://web.archive.org/cdx/search/cdx?url={main_url}/*&output=txt&fl=original&collapse=urlkey&page=/"

        response = requester.connector(main_url)
        crawled_urls = crawler.spider(main_url, 10)
        response = concatenate_list_data(crawled_urls, response)
        if response == False:
            return
        response = unquote(response)

        exclude = ['woff', 'js', 'ttf', 'otf', 'eot', 'svg', 'png', 'jpg']
        final_uris = extractor.param_extract(response, "high", exclude, "")

        print("\n"+"["+green("INF")+"] Crwaling completed Total ",
            len(final_uris), " links crawled")

        for uri in final_uris:

            if uri.isspace() or not uri:
                pass
            else:

                print("\n\n"+"["+blue("INFO")+"]"+f" Processing {uri}")

                print("\n"+"["+blue("INFO")+"]"+f" Scanning for SQL-Injection")

                sql_vulnerable_links = sql_injection_test(uri)
                if len(sql_vulnerable_links) == 0:
                    print("["+blue("NO SQL-Injection Vulnerability")+"] ")
                else:
                    for link in sql_vulnerable_links:
                        print("["+red("Found SQL-Injection Vulnerability")+"] "+link)

                print("\n"+"["+blue("INFO")+"]"+f" Scanning for XSS")

                XSS.core.main(

                    uri,
                    None,
                    agent,
                    XSS.core.generate(6),
                    '''{"ID":"1094200543"}''',
                    2
                )

                print("\n"+"["+blue("INFO")+"]"+f" Scanning for CSRF")
                try:
                    CSRF(uri)
                except:
                    pass

                print("\n"+"["+blue("INFO")+"]" +
                    f" Scanning for Remote Code Executon")
                try:
                    remote_code_execution(uri)
                except:
                    pass

                print("\n"+"["+blue("INFO")+"]" +
                    f" Scanning for Security Misconfiguration")
                try:
                    security_misconfiguration(uri)
                except:
                    pass

                print("\n"+"["+blue("INFO")+"]" +
                    f" Scanning for Broken Authentication ")
                try:
                    broken_auth(uri)
                except:
                    pass

                print("\n\n*********************************************")


if __name__ == "__main__":

    main()
